blueprint:
  source_url: https://raw.githubusercontent.com/sean797/ha-blueprints/refs/heads/main/tap5.yaml
  name: Tap5 button (double and triple clicks)
  description:
    "Control anything with an Tap5 via digital inputs.
    Every button is fully customizable and can be double and triple clicked.
    When holding a button you can also choose an action to trigger repeatedly."
  domain: automation
  author: sean797
  homeassistant:
    min_version: 2024.6.0
  input:
    center_button:
      name: Center button
      icon: mdi:bullseye-arrow
      collapsed: true
      input:
        button_center_x1:
          name: Center button - single click
          description: Action to run on single center button click.
          default: []
          selector:
            action: {}
        button_center_x2:
          name: Center button - double click
          description: Action to run on double center button click.
          default: []
          selector:
            action: {}
        button_center_x3:
          name: Center button - triple click
          description: Action to run on triple center button click.
          default: []
          selector:
            action: {}
    top_left_button:
      name: Top left button
      icon: mdi:arrow-top-left
      collapsed: true
      input:
        button_top_left_x1:
          name: Top left button - single click
          description: Action to run on single left button click.
          default: []
          selector:
            action: {}
        button_top_left_x2:
          name: Top left button - double click
          description: Action to run on double left button click.
          default: []
          selector:
            action: {}
        button_top_left_x3:
          name: Top left button - triple click
          description: Action to run on triple left button click.
          default: []
          selector:
            action: {}
        button_top_left_hold:
          name: Top left button - hold
          description: Action to run on left button hold.
          default: []
          selector:
            action: {}
        button_top_left_hold_repeated:
          name: Top left button - hold - repeated
          description: Action to run repeated on left button hold.
          default: []
          selector:
            action: {}
        button_top_left_release:
          name: Top left button - release
          description: Action to run on left button release.
          default: []
          selector:
            action: {}
    top_right_button:
      name: Top right button
      icon: mdi:arrow-top-right
      collapsed: true
      input:
        button_top_right_x1:
          name: Top right button - single click
          description: Action to run on single right button click.
          default: []
          selector:
            action: {}
        button_top_right_x2:
          name: Top right button - double click
          description: Action to run on double right button click.
          default: []
          selector:
            action: {}
        button_top_right_x3:
          name: Top right button - triple click
          description: Action to run on triple right button click.
          default: []
          selector:
            action: {}
        button_top_right_hold:
          name: Top right button - hold
          description: Action to run on right button hold.
          default: []
          selector:
            action: {}
        button_top_right_hold_repeated:
          name: Top right button - hold - repeated
          description: Action to run repeated on right button hold.
          default: []
          selector:
            action: {}
        button_top_right_release:
          name: Top right button - release
          description: Action to run on right button release.
          default: []
          selector:
            action: {}
    bottom_left_button:
      name: Bottom left button
      icon: mdi:arrow-bottom-left
      collapsed: true
      input:
        button_bottom_left_x1:
          name: Bottom left button - single click
          description: Action to run on single up button click.
          default: []
          selector:
            action: {}
        button_bottom_left_x2:
          name: Bottom left button - double click
          description: Action to run on double up button click.
          default: []
          selector:
            action: {}
        button_bottom_left_x3:
          name: Bottom left button - triple click
          description: Action to run on triple up button click.
          default: []
          selector:
            action: {}
        button_bottom_left_hold:
          name: Bottom left button - hold
          description: Action to run on up button hold.
          default: []
          selector:
            action: {}
        button_bottom_left_hold_repeated:
          name: Bottom left button - hold - repeated
          description: Action to run repeated on up button hold.
          default: []
          selector:
            action: {}
        button_bottom_left_release:
          name: Bottom left button - release
          description: Action to run on up button release.
          default: []
          selector:
            action: {}
    bottom_right_button:
      name: Bottom right button
      icon: mdi:arrow-bottom-right
      collapsed: true
      input:
        button_bottom_right_x1:
          name: Bottom right button - single click
          description: Action to run on single down button click.
          default: []
          selector:
            action: {}
        button_bottom_right_x2:
          name: Bottom right button - double click
          description: Action to run on double down button click.
          default: []
          selector:
            action: {}
        button_bottom_right_x3:
          name: Bottom right button - triple click
          description: Action to run on triple down button click.
          default: []
          selector:
            action: {}
        button_bottom_right_hold:
          name: Bottom right button - hold
          description: Action to run on down button hold.
          default: []
          selector:
            action: {}
        button_bottom_right_hold_repeated:
          name: Bottom right button - hold - repeated
          description: Action to run repeated on down button hold.
          default: []
          selector:
            action: {}
        button_bottom_right_release:
          name: Bottom right button - release
          description: Action to run on down button release.
          default: []
          selector:
            action: {}
    settings:
      name: Settings
      collapsed: true
      input:
        interval:
          name: Max Interval between Clicks
          description:
            Maximum time interval between two clicks. Corresponds to the delay
            from the last click to the triggering of the action.
          default: 0.25
          selector:
            number:
              min: 0.05
              max: 2.0
              unit_of_measurement: seconds
              step: 0.01
              mode: box
        repeat_interval:
          name: Interval between repeats
          description: Time interval between repeats when holding up/down/left/right.
          default: 0.3
          selector:
            number:
              min: 0.05
              max: 10.0
              unit_of_measurement: seconds
              step: 0.01
              mode: box
        repeat_count:
          name: Max number of repeats
          description: Max number of repeats. (when holding)
          default: 100
          selector:
            number:
              min: 0
              max: 2000
              step: 1
              mode: box
    entities:
      name: Entities
      input:
        button_center_entity:
          name: Center button
          description: Select the sensor you wish to use.
          selector:
            entity:
              domain: binary_sensor
        button_top_left_entity:
          name: Top left button
          description: Select the sensor you wish to use.
          selector:
            entity: 
              domain: binary_sensor
        button_top_right_entity:
          name: Top right button
          description: Select the sensor you wish to use.
          selector:
            entity:
              domain: binary_sensor
        button_bottom_left_entity:
          name: Bottom left button
          description: Select the sensor you wish to use.
          selector: 
            entity:
              domain: binary_sensor
        button_bottom_right_entity:
          name: Bottom right button
          description: Select the sensor you wish to use.
          selector:
            entity:
              domain: binary_sensor

###########################################
#                 Start                   #
###########################################

mode: single
max_exceeded: silent

variables:
  time: " {{ as_timestamp(now()) }} "
  interval: !input interval
  repeat_interval: !input repeat_interval
  repeat_count: !input repeat_count
  button_center_entity: !input button_center_entity
  button_top_left_entity: !input button_top_left_entity
  button_top_right_entity: !input button_top_right_entity
  button_bottom_left_entity: !input button_bottom_left_entity
  button_bottom_right_entity: !input button_bottom_right_entity

trigger:
  - trigger: state
    entity_id: !input button_center_entity
    id: button_center_trigger
  - trigger: state
    entity_id: !input button_top_left_entity
    id: button_top_left_trigger
    to: 'off'
  - trigger: state
    entity_id: !input button_top_left_entity
    id: button_top_left_trigger_hold
    to: 'on'
    for: 
      hours: 0
      minutes: 0
      seconds: 1
  - trigger: state
    entity_id: !input button_top_right_entity
    id: button_top_right_trigger
    to: 'off'
  - trigger: state
    entity_id: !input button_top_left_entity
    id: button_top_right_trigger_hold
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 1
  - trigger: state
    entity_id: !input button_bottom_left_entity
    id: button_bottom_left_trigger
    to: 'off'
  - trigger: state
    entity_id: !input button_bottom_left_entity
    id: button_bottom_left_trigger_hold
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 1
  - trigger: state
    entity_id: !input button_bottom_right_entity
    id: button_bottom_right_trigger
    to: 'off'
  - trigger: state
    entity_id: !input button_bottom_right_entity
    id: button_bottom_right_trigger_hold
    to: 'on'
    for:
      hours: 0
      minutes: 0
      seconds: 1

action:
  - choose:
      ####################################
      #          center button           #
      ####################################
      - conditions:
          - condition: trigger
            id: button_center_trigger
        sequence:
          - wait_for_trigger:
              - trigger: state 
                entity_id: !input button_center_entity
                to: 'on'
            timeout: "{{interval}}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
            # 1x-Press center button
            then: !input button_center_x1
            else:
              - variables:
                  time: " {{ as_timestamp(now()) }} "
              - wait_for_trigger:
                  - trigger: state
                    entity_id: !input button_center_entity
                    to: 'on'
                timeout: "{{interval}}"
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
                # 2x-Press center button
                then: !input button_center_x2
                # 3x-Press center button
                else: !input button_center_x3

      ####################################
      #            Bottom left button    #
      ####################################
      - conditions:
          - condition: trigger
            id: button_bottom_left_trigger
        sequence:
          - wait_for_trigger:
              - trigger: state 
                entity_id: !input button_bottom_left_entity
                to: 'on' 
            timeout: "{{interval}}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
            # 1x-Press bottom left button
            then: !input button_bottom_left_x1
            else:
              - variables:
                  time: " {{ as_timestamp(now()) }} "
              - wait_for_trigger:
                  - trigger: state 
                    entity_id: !input button_bottom_left_entity
                    to: 'on'
                timeout: "{{interval}}"
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
                # 2x-Press bottom left button
                then: !input button_bottom_left_x2
                # 3x-Press bottom left button
                else: !input button_bottom_left_x3

      # Hold bottom left button
      - conditions:
          - condition: trigger
            id: button_bottom_left_trigger_hold
        sequence:
          # Hold up button
          - choose: []
            default: !input button_bottom_left_hold
          - repeat:
              until:
                - condition: template
                  value_template: "{{ wait.trigger is not none or repeat.index >= repeat_count }}"
              sequence:
                # Hold up button repeated
                - choose: []
                  default: !input button_bottom_left_hold_repeated
                - wait_for_trigger:
                    - trigger: state
                      entity_id: !input button_center_entity
                      from: 'off'
                      to: 'on'
                  timeout: "{{repeat_interval}}"
          # Release up button
          - choose: []
            default: !input button_bottom_left_release

      ####################################
      #           Bottom right button    #
      ####################################
      - conditions:
          - condition: trigger
            id: button_bottom_right_trigger
        sequence:
          - wait_for_trigger:
              - trigger: state
                entity_id: !input button_bottom_right_entity
                from: 'on'
            timeout: "{{interval}}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
            # 1x-Press down button
            then: !input button_bottom_right_x1
            else:
              - variables:
                  time: " {{ as_timestamp(now()) }} "
              - wait_for_trigger:
                  - trigger: state
                    entity_id: !input button_bottom_right_entity
                    from: 'on'
                timeout: "{{interval}}"
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
                # 2x-Press down button
                then: !input button_bottom_right_x2
                # 3x-Press down button
                else: !input button_bottom_right_x3

      # Hold down button
      - conditions:
          - condition: trigger
            id: button_bottom_right_trigger_hold
        sequence:
          # Hold down button
          - choose: []
            default: !input button_bottom_right_hold
          - repeat:
              until:
                - condition: template
                  value_template: "{{ wait.trigger is not none or repeat.index >= repeat_count }}"
              sequence:
                # Hold down button repeated
                - choose: []
                  default: !input button_bottom_right_hold_repeated
                - wait_for_trigger:
                    - trigger: state
                      entity_id: !input button_bottom_right_entity
                      to: 'off'
                      from: 'on'
                  timeout: "{{repeat_interval}}"
          # Release down button
          - choose: []
            default: !input button_bottom_right_release

      ####################################
      #           Top left button        #
      ####################################
      - conditions:
          - condition: trigger
            id: button_top_left_trigger
        sequence:
          - wait_for_trigger:
              - trigger: state 
                entity_id: !input button_top_left_entity
                to: 'on'
            timeout: "{{interval}}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
            # 1x-Press left button
            then: !input button_top_left_x1
            else:
              - variables:
                  time: " {{ as_timestamp(now()) }} "
              - wait_for_trigger:
                  - trigger: state 
                    entity_id: !input button_top_left_entity
                    to: 'on'
                timeout: "{{interval}}"
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
                # 2x-Press left button
                then: !input button_top_left_x2
                # 3x-Press left button
                else: !input button_top_left_x3

      # Hold left button
      - conditions:
          - condition: trigger
            id: button_top_left_trigger_hold
        sequence:
          # Hold left button
          - choose: []
            default: !input button_top_left_hold
          - repeat:
              until:
                - condition: template
                  value_template: "{{ wait.trigger is not none or repeat.index >= repeat_count }}"
              sequence:
                # Hold left button repeated
                - choose: []
                  default: !input button_top_left_hold_repeated
                - wait_for_trigger:
                    - trigger: state 
                      entity_id: !input button_top_left_entity
                      to: 'off'
                      from: 'on'
                  timeout: "{{repeat_interval}}"
          # Release left button
          - choose: []
            default: !input button_top_left_release

      ####################################
      #           Top right button           #
      ####################################
      - conditions:
          - condition: trigger
            id: button_top_right_trigger
        sequence:
          - wait_for_trigger:
              - trigger: state
                entity_id: !input button_top_right_entity
                to: 'on'
            timeout: "{{interval}}"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
            # 1x-Press top right button
            then: !input button_top_right_x1
            else:
              - variables:
                  time: " {{ as_timestamp(now()) }} "
              - wait_for_trigger:
                  - trigger: state
                    entity_id: !input button_top_right_entity
                    to: 'on'
                timeout: "{{interval}}"
                continue_on_timeout: true
              - if:
                  - condition: template
                    value_template: "{{(as_timestamp(now()) - time ) >= interval }}"
                # 2x-Press right button
                then: !input button_top_right_x2
                # 3x-Press right button
                else: !input button_top_right_x3

      # Hold top right button
      - conditions:
          - condition: trigger
            id: button_top_right_trigger_hold
        sequence:
          # Hold top right button
          - choose: []
            default: !input button_top_right_hold
          - repeat:
              until:
                - condition: template
                  value_template: "{{ wait.trigger is not none or repeat.index >= repeat_count }}"
              sequence:
                # Hold top right button repeated
                - choose: []
                  default: !input button_top_right_hold_repeated
                - wait_for_trigger:
                    - trigger: state
                      entity_id: !input button_top_right_entity
                      to: 'off'
                      from: 'on'
                  timeout: "{{repeat_interval}}"
          # Release right button
          - choose: []
            default: !input button_top_right_release
